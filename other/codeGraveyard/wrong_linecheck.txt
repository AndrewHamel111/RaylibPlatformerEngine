bool player::LineCheck(LineCheckDirection dir, int lineSegments, env_list obj)
{
	// never use less than 5 line segments (would be very inaccurate if we did)
	if (lineSegments < 5) lineSegments = 5;

	const float hitPercentage = 0.25;

	unsigned char collisionCounter = 0;

	auto it = obj.begin();

	switch(dir)
	{
	case UP: // top left to top right
		for(int i = 0; i < lineSegments; i++)
		{
			// player's position + the offset to reach the appropriate corner (top left) + the offset from where we are in the iteration
			Vector2 hitPoint = this->pos + this->hitbox_corners[0] + Vector2{(float)i/(lineSegments - 1)*this->hitboxSize.x, 0};
			for(it = obj.begin(); it != obj.end(); it++)
				if (hitPoint < it->rect && this->pos.y > (it->rect.y + it->rect.height)) ///TODO double check this if
					collisionCounter++;
		}
		break;
	case RIGHT: // top right to bottom right
		for(int i = 0; i < lineSegments; i++)
		{
			Vector2 hitPoint = this->pos + this->hitbox_corners[1] + Vector2{0, (float)i/(lineSegments - 1)*this->hitboxSize.y};
			for(it = obj.begin(); it != obj.end(); it++)
				if (hitPoint < it->rect && this->pos.x < it->rect.x)
					collisionCounter++;
		}
		break;
	case DOWN: // bottom right to bottom left
		for(int i = 0; i < lineSegments; i++)
		{
			Vector2 hitPoint = this->pos + this->hitbox_corners[2] - Vector2{(float)i/(lineSegments - 1)*this->hitboxSize.x, 0};
			for(it = obj.begin(); it != obj.end(); it++)
				if (hitPoint < it->rect && this->pos.y < (it->rect.y + this->hitboxSize.y/2))
					collisionCounter++;
		}
		break;
	case LEFT: // bottom left to top right
		for(int i = 0; i < lineSegments; i++)
		{
			Vector2 hitPoint = this->pos + this->hitbox_corners[3] - Vector2{0, (float)i/(lineSegments - 1)*this->hitboxSize.y};
			for(it = obj.begin(); it != obj.end(); it++)
				if (hitPoint < it->rect && this->pos.x > (it->rect.x + it->rect.width))
					collisionCounter++;
		}
		break;
	}

	if ((float)collisionCounter/lineSegments >= hitPercentage)
		return true;
	return false;
}